/* eslint no-console:"off" */

/*
  This script is how you get authorization from a gmail account (like advisor@movementvote.org)
  to send mail on its behalf. 

  You run this script from the command line directly to do the authorization and then test
  the mail 'send' functionality.

  You need to maintain 3 JSON files that live in $HOME/credentials

  gmail-profile     - You create/maintain this manually. It specifies the 'from'
                      email that authorized this app to send mail on it's behalf.

  gmail-credentials - This is generated and downloaded from 
                      console.developers.google.com/apis/credentials panel. The current
                      project is movement2016-143022 but I'm pretty sure anybody can create
                      another one. If you create a new one use the 'web application' type

  gmail-auth        - Generated by this script (details below)

  Steps for authorizing:

  1. Make sure this website is up and running
  2. Make sure there is no $HOME/credentials/gmail-auth.json file (delete or rename previous ones if there)
  3. Run this script from a terminal command line without any parameters e.g. node gmail-auth
  4. This will display a huge gnarly URL and wait for response - "paste and go" that URL into your browser 
  5. That URL will re-direct you to this website - Copy the 'code' parameter 
  6. Paste that code into the waiting prompt and hit return

  These steps will generate a $HOME/credentials/gmail-auth.json file. 

  To test if sending mail will work, re-run this script with the 'to' address as the parameter:

       node gmail-auth victor@somedomain.com

  That address should get two test emails.

  There might be any number of reasons that you need re-authorize the gmail service like:

    - the gmail service is not initializing you're getting an error
    - the 'contact' email changed
    - the domain of this server changed
    - the IP changed (less of an issue but maybe) 
    - etc.

  If any of these are happening, redo ALL the steps above to generate a new gmail-auth file.

*/
var fs = require('fs');
var readline = require('readline');
var GMail = require('../src/server/gmail');

var SCOPES = [
    'https://mail.google.com/',
    'https://www.googleapis.com/auth/gmail.modify',
    'https://www.googleapis.com/auth/gmail.compose',
    'https://www.googleapis.com/auth/gmail.send'
];

class AuthFetcher extends GMail {
  onNoAuthTokenFound() {
    var client = this._oauth2Client;
    return new Promise( (resolve,reject) => {
      var authUrl = this._oauth2Client.generateAuthUrl({
        access_type: 'offline',
        scope: SCOPES
      });
      console.log('Authorize this app by visiting this url: \n\n', authUrl, '\n\n');
      var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      rl.question('Enter the code from that page here: ', code => {
        rl.close();
        client.getToken(code, function(err, credentials) {
          err && reject(err);
          !err && resolve(storeToken(Object.assign(client,{credentials})));
        });
      });    
    });
  }
}

const storeToken = client => new Promise( (resolve,reject) => {
  try {
    fs.mkdirSync(GMail.TOKEN_DIR);
  } catch (err) {
    if (err.code !== 'EEXIST') {
      return reject(err);
    }
  }
  fs.writeFile(GMail.TOKEN_PATH, JSON.stringify(client.credentials));
  console.log('Token stored to ' + GMail.TOKEN_PATH);
  return client;
});


var mailer = new AuthFetcher();

const mailTo = process.argv && process.argv[2];

if( mailTo ) {

  const email1 = {
    to:      mailTo,
    subject: 'Hello from node',
    message: 'Test sending email: ' + Date.now()
  };

  const email2 = {
    to:      mailTo,
    subject: 'Hello from node (2)',
    message: 'Test sending email: ' + Date.now()
  };

  Promise.all([
      mailer.send( email1 ).then( resp => console.log( 'response for email1', resp ) ),
      mailer.send( email2 ).then( resp => console.log( 'response for email2', resp ) )
  ]).catch( err => console.log( 'error:', err ) );

} else {

  mailer.authorize()
    .then( () => console.log( 'GMail class is ready to use '))
    .catch( err => console.log( 'error:', err ) );

}

